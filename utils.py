import numpy as np
from gensim.models import Word2Vec
from konlpy.tag import Okt
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from tqdm import tqdm

## 출처: 여러 블로그
STOP_WORDS = ['생각이다', '다시말하면', '제', '줄', '에', '이라면', '안다', '지', '못하다', '얼마간', '제외하고', '몇', '오자마자', '대하면', '이어서', '결국',
              '된바에야', '비교적', '향하여', '때가', '저것만큼', '버금', '조차도', '관련이', '내', '하려고하다', '그래', '중에서', '반드시', '어떤것', '아니면',
              '언젠가', '령', '어느해', '어이', '비록', '만이', '중', '여러분', '거니와', '하고있었다', '이유만으로', '들면', '하물며', '앞', '없다', '그치지',
              '해도', '사람', '같은', '만약에', '따름이다', '어찌됏든', '형식으로', '바꾸어말하자면', '하면된다', '과', '임에', '하기보다는', '그럼에도', '나머지는',
              '없고', '하다', '첫번째로', '오호', '하지마라', '둥둥', '않다', '적', '부류의', '인', '요만한걸', '보는데서', '얼마나', '퉤', '와르르', '일',
              '위하', '입각하여', '예를', '이럴정도로', '데', '겨우', '이젠', '뿐이다', '하고', '실로', '여부', '전자', '아이야', '좍좍', '따르는', '마음대로',
              '나오', '사실', '삐걱', '같이', '그렇지만', '만일', '어느것', '일지라도', '어떤것들', '경우', '가', '혼자', '이렇', '오히려', '하도록시키다',
              '하든지', '의지하여', '두', '여전히', '기준으로', '어떻해', '즉', '더욱이는', '아래윗', '틀림없다', '남짓', '너희', '아니었다면', '할망정', '대해서',
              '듯하다', '어찌', '다만', '한켠으로는', '뒤따라', '없', '가까스로', '삐걱거리다', '해요', '생각한대로', '앗', '참', '한데', '속', '로써', '그렇',
              '그러나', '했어요', '놀라다', '쉿', '아울러', '하느니', '낫다', '서술한바와같이', '아홉', '시간', '요컨대', '봐', '어찌하든지', '저쪽', '왜냐하면',
              '어떤', '어째서', '다음', '하게하다', '할때', '얼마큼', '다수', '받', '하지', '마치', '하게될것이다', '몰랏다', '얼마만큼', '않', '헐떡헐떡', '무엇',
              '비길수', '관계가', '한마디', '등', '보', '혹은', '할지언정', '저', '하나', '영차', '과연', '비슷하다', '답다', '하지마', '저희', '것과',
              '까닭으로', '이', '각종', '하는것만', '보다더', '생각하', '번', '휘익', '안된다', '어느', '기타', '단지', '어떠한', '이만큼', '대로', '월',
              '비하면', '그렇지', '진짜로', '위해서', '그에', '그러므로', '운운', '훨씬', '자기집', '무슨', '까지', '인젠', '좀', '따지지', '어떻게', '통하여',
              '년도', '으로서', '씨', '무릎쓰고', '퍽', '붕붕', '물론', '따르', '본대로', '보드득', '아니다', '이러한', '까닭에', '고로', '심지어', '하는',
              '어', '뿐만', '않는다면', '오직', '지말고', '양자', '전후', '어느곳', '및', '사람들', '아이쿠', '할수있어', '줄은', '앞에서', '예컨대', '일곱',
              '저것', '가령', '라', '이렇게', '도달하다', '아니라면', '할뿐', '불구하고', '겸사겸사', '않기', '쓰여', '그만이다', '의거하여', '하면서', '여섯',
              '미치다', '어때', '기대여', '당장', '곧', '말할것도', '바와같이', '그들', '구토하다', '습니다', '탕탕', '이천칠', '함으로써', '만약', '게우다',
              '이상', '너희들', '아니', '하마터면', '기점으로', '넷', '우리들', '해야한다', '를', '인하여', '그러면', '논하지', '되어', '왜', '그러니까', '않다면',
              '상대적으로', '타인', '의해', '예하면', '그저', '안', '봐라', '이렇게말하자면', '여덟', '아이구', '하구나', '많은', '여자', '자신', '비걱거리다',
              '따라서', '일때', '바꾸어서', '자기', '알', '구체적으로', '다섯', '소인', '더불어', '네', '아무도', '아하', '얼마', '언제', '주저하지', '해봐요',
              '싶', '차라리', '대하여', '조차', '한다면', '부터', '근거로', '매번', '든간에', '연관되다', '허', '사', '여기', '참나', '이러이러하다', '공동으로',
              '크', '이르기까지', '되', '한적이있다', '아이고', '그렇게', '시키다', '아니라', '아니나다를가', '딱', '댕그', '끙끙', '제각기', '년', '이외에도',
              '마저도', '쳇', '솨', '등등', '연이서', '해도좋다', '그래도', '저기', '잘', '이용하여', '그때', '이와같다면', '많', '이때', '예', '더', '영',
              '소생', '힘입어', '습니까', '꽈당', '좋', '와', '밖에', '잠깐', '의해서', '누구', '알겠는가', '팔', '중의하나', '륙', '말', '할수있다', '개',
              '말하자면', '이천구', '둘', '타다', '메쓰겁다', '때문', '이와', '지경이다', '응당', '비추어', '마저', '이봐', '거바', '칠', '까지도', '그렇지않으면',
              '할만하다', '만들', '함께', '더군다나', '어디', '헉', '여보시오', '있다', '다른', '다음으로', '보이', '팍', '하기는한데', '바꿔', '이리하여',
              '이천육', '거의', '하더라도', '그녀', '우리', '보아', '우에', '들자면', '지든지', '못하', '어쨋든', '점', '아야', '반대로', '이유는', '따위',
              '그런즉', '으로써', '잇따라', '끼익', '설마', '모르', '이런', '이었다', '더구나', '그럼', '허걱', '동안', '정도', '후', '여', '할', '무엇때문에',
              '이쪽', '말하면', '자마자', '얼마든지', '모두', '또한', '하기', '집', '오로지', '즉시', '때문에', '쾅쾅', '문제', '이지만', '이로', '다음에',
              '시각', '통하', '하자마자', '콸콸', '즈음하여', '자', '각각', '만큼', '고려하면', '하면', '하하', '관한', '으로', '수', '우르르', '와아',
              '하여금', '그중에서', '이르다', '할수록', '전', '아이', '불문하고', '설령', '견지에서', '그러니', '하는것이', '정도에', '가서', '이렇게되면', '틈타',
              '각', '낼', '그런데', '위하여', '조금', '어쩔수', '두번째로', '어떻', '잠시', '근거하여', '해도된다', '약간', '딩동', '어느때', '졸졸', '힘이',
              '엉엉', '정도의', '막론하고', '알았어', '달려', '전부', '비로소', '갖고말하자면', '관해서는', '원', '것', '몰라도', '펄렁', '일단', '가지', '않으면',
              '보면', '지만', '살', '이천팔', '누가', '툭', '그래서', '에게', '바꾸어말하면', '만은', '아', '육', '셋', '생각', '어느쪽', '개의치않고', '당신',
              '그것', '오르다', '의해되다', '요만큼', '같다', '쿵', '휴', '되다', '에서', '시작하여', '너', '주', '야', '더라도', '하여야', '관하여', '흐흐',
              '혹시', '결론을', '동시에', '결과에', '사회', '하겠는가', '쪽으로', '토하다', '이것', '해서는', '외에도', '김에', '게다가', '이곳', '응', '각자',
              '않도록', '하지만', '아무거나', '헉헉', '한항목', '일것이다', '요만한', '명', '설사', '모', '로', '말하', '외에', '같', '어찌하여', '하기만',
              '하기에', '방면으로', '대하', '지금', '하는것도', '할지라도', '매', '하도다', '않고', '입장에서', '총적으로', '하는바', '이렇구나', '뿐만아니라', '그런',
              '더욱더', '향하다', '향해서', '그', '놓', '하', '위에서', '한', '점에서', '뒤이어', '일반적으로', '한하다', '구', '다시', '이번', '편이', '좋아',
              '종합한것과같이', '오', '우선', '허허', '된이상', '여차', '나', '시초에', '의', '되는', '시키', '그러', '뚝뚝', '이래', '어기여차', '또',
              '줄은모른다', '어찌됏어', '대해', '만', '흥', '있', '삼', '때', '것들', '들', '앞의것', '하도록하다', '따라', '하곤하였다', '관계없이', '다소',
              '옆사람', '까악', '윙윙', '그러한즉', '을', '그리고', '바로', '로부터', '주룩주룩', '도착하다', '할줄알다', '무렵', '그위에', '그리하여', '남들']


def clean_punc(text):
    punct = "·/-'?!.,#$%\'()*+-/:;<=>@[\\]^_`{|}~" + '""“”’' + '∞θ÷α•à−β∅³π‘₹´°£€\×™√²—–&'
    mapping = {"‘": "'", "₹": "e", "´": "'", "°": "", "€": "e", "™": "tm", "√": " sqrt ", "×": "x", "²": "2",
               "—": "-", "–": "-", "’": "'", "_": "-", "`": "'", '“': '"', '”': '"', '“': '"', "£": "e",
               '∞': 'infinity', 'θ': 'theta', '÷': '/', 'α': 'alpha', '•': '.', 'à': 'a', '−': '-', 'β': 'beta',
               '∅': '', '³': '3', 'π': 'pi'}

    for p in mapping:
        text = text.replace(p, mapping[p])

    for p in punct:
        text = text.replace(p, '')

    specials = {'\u200b': '', '…': '', '\ufeff': '', 'करना': '', 'है': ''}
    for s in specials:
        text = text.replace(s, specials[s])

    return text.strip()


# Convert documents to vectors
def average_word2vec(doc, model):
    vectors = [model.wv[word] for word in doc if word in model.wv]
    if vectors:
        return np.mean(vectors, axis=0)
    else:
        return np.zeros(model.vector_size)  # Return a zero vector if no words in the model


def vectorize(articles, scaler: MinMaxScaler = MinMaxScaler()):
    refined_document = [clean_punc(txt) for txt in articles]

    okt = Okt()

    tokenized_data = []
    ready = tqdm(refined_document)

    for sentence in ready:
        tokenized_sentence = okt.morphs(sentence, stem=True)  # 토큰화
        stopwords_removed_sentence = [word for word in tokenized_sentence if not word in STOP_WORDS]  # 불용어 제거
        tokenized_data.append(stopwords_removed_sentence)

    model = Word2Vec(sentences=tokenized_data, vector_size=100, window=5, min_count=1, workers=4)

    doc_vectors = [average_word2vec(doc, model) for doc in tokenized_data]

    scaled_vectors = scaler.fit_transform(doc_vectors)

    return scaled_vectors
